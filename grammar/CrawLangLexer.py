# Generated from CrawLang.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,36,211,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,
        1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,
        4,9,114,8,9,11,9,12,9,115,1,9,1,9,1,10,1,10,1,10,1,10,5,10,124,8,
        10,10,10,12,10,127,9,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,
        1,11,5,11,138,8,11,10,11,12,11,141,9,11,1,11,1,11,1,11,1,11,1,11,
        1,12,1,12,5,12,150,8,12,10,12,12,12,153,9,12,1,13,1,13,3,13,157,
        8,13,1,14,4,14,160,8,14,11,14,12,14,161,1,15,1,15,1,16,1,16,1,17,
        1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,
        1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,1,28,1,29,1,29,
        1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,
        1,34,1,35,1,35,1,35,2,125,139,0,36,1,1,3,2,5,3,7,4,9,5,11,6,13,7,
        15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,1,0,4,3,0,9,10,13,13,32,
        32,2,0,65,90,97,122,4,0,48,57,65,90,95,95,97,122,1,0,48,57,216,0,
        1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,
        0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,
        0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,
        0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,
        0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,
        0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,
        0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,
        0,0,0,1,73,1,0,0,0,3,78,1,0,0,0,5,82,1,0,0,0,7,85,1,0,0,0,9,90,1,
        0,0,0,11,94,1,0,0,0,13,101,1,0,0,0,15,105,1,0,0,0,17,109,1,0,0,0,
        19,113,1,0,0,0,21,119,1,0,0,0,23,133,1,0,0,0,25,147,1,0,0,0,27,156,
        1,0,0,0,29,159,1,0,0,0,31,163,1,0,0,0,33,165,1,0,0,0,35,167,1,0,
        0,0,37,169,1,0,0,0,39,171,1,0,0,0,41,173,1,0,0,0,43,175,1,0,0,0,
        45,177,1,0,0,0,47,179,1,0,0,0,49,181,1,0,0,0,51,183,1,0,0,0,53,185,
        1,0,0,0,55,187,1,0,0,0,57,189,1,0,0,0,59,192,1,0,0,0,61,195,1,0,
        0,0,63,197,1,0,0,0,65,199,1,0,0,0,67,202,1,0,0,0,69,205,1,0,0,0,
        71,208,1,0,0,0,73,74,5,99,0,0,74,75,5,104,0,0,75,76,5,97,0,0,76,
        77,5,114,0,0,77,2,1,0,0,0,78,79,5,105,0,0,79,80,5,110,0,0,80,81,
        5,116,0,0,81,4,1,0,0,0,82,83,5,105,0,0,83,84,5,102,0,0,84,6,1,0,
        0,0,85,86,5,101,0,0,86,87,5,108,0,0,87,88,5,115,0,0,88,89,5,101,
        0,0,89,8,1,0,0,0,90,91,5,102,0,0,91,92,5,111,0,0,92,93,5,114,0,0,
        93,10,1,0,0,0,94,95,5,114,0,0,95,96,5,101,0,0,96,97,5,116,0,0,97,
        98,5,117,0,0,98,99,5,114,0,0,99,100,5,110,0,0,100,12,1,0,0,0,101,
        102,5,110,0,0,102,103,5,111,0,0,103,104,5,116,0,0,104,14,1,0,0,0,
        105,106,5,97,0,0,106,107,5,110,0,0,107,108,5,100,0,0,108,16,1,0,
        0,0,109,110,5,111,0,0,110,111,5,114,0,0,111,18,1,0,0,0,112,114,7,
        0,0,0,113,112,1,0,0,0,114,115,1,0,0,0,115,113,1,0,0,0,115,116,1,
        0,0,0,116,117,1,0,0,0,117,118,6,9,0,0,118,20,1,0,0,0,119,120,5,47,
        0,0,120,121,5,42,0,0,121,125,1,0,0,0,122,124,9,0,0,0,123,122,1,0,
        0,0,124,127,1,0,0,0,125,126,1,0,0,0,125,123,1,0,0,0,126,128,1,0,
        0,0,127,125,1,0,0,0,128,129,5,42,0,0,129,130,5,47,0,0,130,131,1,
        0,0,0,131,132,6,10,0,0,132,22,1,0,0,0,133,134,5,47,0,0,134,135,5,
        47,0,0,135,139,1,0,0,0,136,138,9,0,0,0,137,136,1,0,0,0,138,141,1,
        0,0,0,139,140,1,0,0,0,139,137,1,0,0,0,140,142,1,0,0,0,141,139,1,
        0,0,0,142,143,5,13,0,0,143,144,5,10,0,0,144,145,1,0,0,0,145,146,
        6,11,0,0,146,24,1,0,0,0,147,151,7,1,0,0,148,150,7,2,0,0,149,148,
        1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,26,1,
        0,0,0,153,151,1,0,0,0,154,157,3,29,14,0,155,157,3,31,15,0,156,154,
        1,0,0,0,156,155,1,0,0,0,157,28,1,0,0,0,158,160,7,3,0,0,159,158,1,
        0,0,0,160,161,1,0,0,0,161,159,1,0,0,0,161,162,1,0,0,0,162,30,1,0,
        0,0,163,164,7,1,0,0,164,32,1,0,0,0,165,166,5,44,0,0,166,34,1,0,0,
        0,167,168,5,59,0,0,168,36,1,0,0,0,169,170,5,40,0,0,170,38,1,0,0,
        0,171,172,5,41,0,0,172,40,1,0,0,0,173,174,5,123,0,0,174,42,1,0,0,
        0,175,176,5,125,0,0,176,44,1,0,0,0,177,178,5,43,0,0,178,46,1,0,0,
        0,179,180,5,45,0,0,180,48,1,0,0,0,181,182,5,42,0,0,182,50,1,0,0,
        0,183,184,5,47,0,0,184,52,1,0,0,0,185,186,5,37,0,0,186,54,1,0,0,
        0,187,188,5,61,0,0,188,56,1,0,0,0,189,190,5,61,0,0,190,191,5,61,
        0,0,191,58,1,0,0,0,192,193,5,33,0,0,193,194,5,61,0,0,194,60,1,0,
        0,0,195,196,5,60,0,0,196,62,1,0,0,0,197,198,5,62,0,0,198,64,1,0,
        0,0,199,200,5,60,0,0,200,201,5,61,0,0,201,66,1,0,0,0,202,203,5,62,
        0,0,203,204,5,61,0,0,204,68,1,0,0,0,205,206,5,60,0,0,206,207,5,60,
        0,0,207,70,1,0,0,0,208,209,5,62,0,0,209,210,5,62,0,0,210,72,1,0,
        0,0,7,0,115,125,139,151,156,161,1,0,1,0
    ]

class CrawLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    SPACE = 10
    COMMENT_BLOCK = 11
    COMMENT_LINE = 12
    VALID_VARIABLE_NAME = 13
    LITERAL = 14
    INT = 15
    CHAR = 16
    COMMA = 17
    SEMICOLON = 18
    LPAREN = 19
    RPAREN = 20
    LCURL = 21
    RCURL = 22
    PLUS = 23
    MINUS = 24
    TIMES = 25
    DIVIDE = 26
    MOD = 27
    ASSIGN = 28
    EQ = 29
    NEQ = 30
    LTHAN = 31
    GTHAN = 32
    LEQ = 33
    GEQ = 34
    SHIFT_LEFT = 35
    SHIFT_RIGHT = 36

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'char'", "'int'", "'if'", "'else'", "'for'", "'return'", "'not'", 
            "'and'", "'or'", "','", "';'", "'('", "')'", "'{'", "'}'", "'+'", 
            "'-'", "'*'", "'/'", "'%'", "'='", "'=='", "'!='", "'<'", "'>'", 
            "'<='", "'>='", "'<<'", "'>>'" ]

    symbolicNames = [ "<INVALID>",
            "SPACE", "COMMENT_BLOCK", "COMMENT_LINE", "VALID_VARIABLE_NAME", 
            "LITERAL", "INT", "CHAR", "COMMA", "SEMICOLON", "LPAREN", "RPAREN", 
            "LCURL", "RCURL", "PLUS", "MINUS", "TIMES", "DIVIDE", "MOD", 
            "ASSIGN", "EQ", "NEQ", "LTHAN", "GTHAN", "LEQ", "GEQ", "SHIFT_LEFT", 
            "SHIFT_RIGHT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "SPACE", "COMMENT_BLOCK", "COMMENT_LINE", 
                  "VALID_VARIABLE_NAME", "LITERAL", "INT", "CHAR", "COMMA", 
                  "SEMICOLON", "LPAREN", "RPAREN", "LCURL", "RCURL", "PLUS", 
                  "MINUS", "TIMES", "DIVIDE", "MOD", "ASSIGN", "EQ", "NEQ", 
                  "LTHAN", "GTHAN", "LEQ", "GEQ", "SHIFT_LEFT", "SHIFT_RIGHT" ]

    grammarFileName = "CrawLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


