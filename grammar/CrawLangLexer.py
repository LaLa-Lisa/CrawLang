# Generated from CrawLang.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,37,219,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,1,0,1,0,1,0,1,0,1,0,1,
        1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,
        5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,
        8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,10,4,10,122,8,10,11,10,12,10,123,
        1,10,1,10,1,11,1,11,1,11,1,11,5,11,132,8,11,10,11,12,11,135,9,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,5,12,146,8,12,10,12,
        12,12,149,9,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,5,13,158,8,13,
        10,13,12,13,161,9,13,1,14,1,14,3,14,165,8,14,1,15,4,15,168,8,15,
        11,15,12,15,169,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,
        1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,
        1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,2,133,
        147,0,37,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,
        12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,
        23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,
        34,69,35,71,36,73,37,1,0,4,3,0,9,10,13,13,32,32,2,0,65,90,97,122,
        4,0,48,57,65,90,95,95,97,122,1,0,48,57,224,0,1,1,0,0,0,0,3,1,0,0,
        0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,
        0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
        0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,
        0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,
        0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,
        0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,
        0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,
        1,75,1,0,0,0,3,80,1,0,0,0,5,84,1,0,0,0,7,87,1,0,0,0,9,92,1,0,0,0,
        11,96,1,0,0,0,13,103,1,0,0,0,15,107,1,0,0,0,17,111,1,0,0,0,19,114,
        1,0,0,0,21,121,1,0,0,0,23,127,1,0,0,0,25,141,1,0,0,0,27,155,1,0,
        0,0,29,164,1,0,0,0,31,167,1,0,0,0,33,171,1,0,0,0,35,173,1,0,0,0,
        37,175,1,0,0,0,39,177,1,0,0,0,41,179,1,0,0,0,43,181,1,0,0,0,45,183,
        1,0,0,0,47,185,1,0,0,0,49,187,1,0,0,0,51,189,1,0,0,0,53,191,1,0,
        0,0,55,193,1,0,0,0,57,195,1,0,0,0,59,197,1,0,0,0,61,200,1,0,0,0,
        63,203,1,0,0,0,65,205,1,0,0,0,67,207,1,0,0,0,69,210,1,0,0,0,71,213,
        1,0,0,0,73,216,1,0,0,0,75,76,5,99,0,0,76,77,5,104,0,0,77,78,5,97,
        0,0,78,79,5,114,0,0,79,2,1,0,0,0,80,81,5,105,0,0,81,82,5,110,0,0,
        82,83,5,116,0,0,83,4,1,0,0,0,84,85,5,105,0,0,85,86,5,102,0,0,86,
        6,1,0,0,0,87,88,5,101,0,0,88,89,5,108,0,0,89,90,5,115,0,0,90,91,
        5,101,0,0,91,8,1,0,0,0,92,93,5,102,0,0,93,94,5,111,0,0,94,95,5,114,
        0,0,95,10,1,0,0,0,96,97,5,114,0,0,97,98,5,101,0,0,98,99,5,116,0,
        0,99,100,5,117,0,0,100,101,5,114,0,0,101,102,5,110,0,0,102,12,1,
        0,0,0,103,104,5,110,0,0,104,105,5,111,0,0,105,106,5,116,0,0,106,
        14,1,0,0,0,107,108,5,97,0,0,108,109,5,110,0,0,109,110,5,100,0,0,
        110,16,1,0,0,0,111,112,5,111,0,0,112,113,5,114,0,0,113,18,1,0,0,
        0,114,115,5,112,0,0,115,116,5,114,0,0,116,117,5,105,0,0,117,118,
        5,110,0,0,118,119,5,116,0,0,119,20,1,0,0,0,120,122,7,0,0,0,121,120,
        1,0,0,0,122,123,1,0,0,0,123,121,1,0,0,0,123,124,1,0,0,0,124,125,
        1,0,0,0,125,126,6,10,0,0,126,22,1,0,0,0,127,128,5,47,0,0,128,129,
        5,42,0,0,129,133,1,0,0,0,130,132,9,0,0,0,131,130,1,0,0,0,132,135,
        1,0,0,0,133,134,1,0,0,0,133,131,1,0,0,0,134,136,1,0,0,0,135,133,
        1,0,0,0,136,137,5,42,0,0,137,138,5,47,0,0,138,139,1,0,0,0,139,140,
        6,11,0,0,140,24,1,0,0,0,141,142,5,47,0,0,142,143,5,47,0,0,143,147,
        1,0,0,0,144,146,9,0,0,0,145,144,1,0,0,0,146,149,1,0,0,0,147,148,
        1,0,0,0,147,145,1,0,0,0,148,150,1,0,0,0,149,147,1,0,0,0,150,151,
        5,13,0,0,151,152,5,10,0,0,152,153,1,0,0,0,153,154,6,12,0,0,154,26,
        1,0,0,0,155,159,7,1,0,0,156,158,7,2,0,0,157,156,1,0,0,0,158,161,
        1,0,0,0,159,157,1,0,0,0,159,160,1,0,0,0,160,28,1,0,0,0,161,159,1,
        0,0,0,162,165,3,31,15,0,163,165,3,33,16,0,164,162,1,0,0,0,164,163,
        1,0,0,0,165,30,1,0,0,0,166,168,7,3,0,0,167,166,1,0,0,0,168,169,1,
        0,0,0,169,167,1,0,0,0,169,170,1,0,0,0,170,32,1,0,0,0,171,172,7,1,
        0,0,172,34,1,0,0,0,173,174,5,44,0,0,174,36,1,0,0,0,175,176,5,59,
        0,0,176,38,1,0,0,0,177,178,5,40,0,0,178,40,1,0,0,0,179,180,5,41,
        0,0,180,42,1,0,0,0,181,182,5,123,0,0,182,44,1,0,0,0,183,184,5,125,
        0,0,184,46,1,0,0,0,185,186,5,43,0,0,186,48,1,0,0,0,187,188,5,45,
        0,0,188,50,1,0,0,0,189,190,5,42,0,0,190,52,1,0,0,0,191,192,5,47,
        0,0,192,54,1,0,0,0,193,194,5,37,0,0,194,56,1,0,0,0,195,196,5,61,
        0,0,196,58,1,0,0,0,197,198,5,61,0,0,198,199,5,61,0,0,199,60,1,0,
        0,0,200,201,5,33,0,0,201,202,5,61,0,0,202,62,1,0,0,0,203,204,5,60,
        0,0,204,64,1,0,0,0,205,206,5,62,0,0,206,66,1,0,0,0,207,208,5,60,
        0,0,208,209,5,61,0,0,209,68,1,0,0,0,210,211,5,62,0,0,211,212,5,61,
        0,0,212,70,1,0,0,0,213,214,5,60,0,0,214,215,5,60,0,0,215,72,1,0,
        0,0,216,217,5,62,0,0,217,218,5,62,0,0,218,74,1,0,0,0,7,0,123,133,
        147,159,164,169,1,0,1,0
    ]

class CrawLangLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    SPACE = 11
    COMMENT_BLOCK = 12
    COMMENT_LINE = 13
    VALID_VARIABLE_NAME = 14
    LITERAL = 15
    INT = 16
    CHAR = 17
    COMMA = 18
    SEMICOLON = 19
    LPAREN = 20
    RPAREN = 21
    LCURL = 22
    RCURL = 23
    PLUS = 24
    MINUS = 25
    TIMES = 26
    DIVIDE = 27
    MOD = 28
    ASSIGN = 29
    EQ = 30
    NEQ = 31
    LTHAN = 32
    GTHAN = 33
    LEQ = 34
    GEQ = 35
    SHIFT_LEFT = 36
    SHIFT_RIGHT = 37

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'char'", "'int'", "'if'", "'else'", "'for'", "'return'", "'not'", 
            "'and'", "'or'", "'print'", "','", "';'", "'('", "')'", "'{'", 
            "'}'", "'+'", "'-'", "'*'", "'/'", "'%'", "'='", "'=='", "'!='", 
            "'<'", "'>'", "'<='", "'>='", "'<<'", "'>>'" ]

    symbolicNames = [ "<INVALID>",
            "SPACE", "COMMENT_BLOCK", "COMMENT_LINE", "VALID_VARIABLE_NAME", 
            "LITERAL", "INT", "CHAR", "COMMA", "SEMICOLON", "LPAREN", "RPAREN", 
            "LCURL", "RCURL", "PLUS", "MINUS", "TIMES", "DIVIDE", "MOD", 
            "ASSIGN", "EQ", "NEQ", "LTHAN", "GTHAN", "LEQ", "GEQ", "SHIFT_LEFT", 
            "SHIFT_RIGHT" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "SPACE", "COMMENT_BLOCK", "COMMENT_LINE", 
                  "VALID_VARIABLE_NAME", "LITERAL", "INT", "CHAR", "COMMA", 
                  "SEMICOLON", "LPAREN", "RPAREN", "LCURL", "RCURL", "PLUS", 
                  "MINUS", "TIMES", "DIVIDE", "MOD", "ASSIGN", "EQ", "NEQ", 
                  "LTHAN", "GTHAN", "LEQ", "GEQ", "SHIFT_LEFT", "SHIFT_RIGHT" ]

    grammarFileName = "CrawLang.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


