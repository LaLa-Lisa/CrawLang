// comment

global_variable = 1000;

int my_fun(int param) {
    a = 18 + 42 * 3;
    b = 77 / 6;
    print( a + b + param );
    return 1 / 3;
}

int fibonacci(int n) {
    a = 0;
    b = 1;
    for (i = 0; i < n; i = i + 1) {
        fib = a + b;
        a = b;
        b = fib;
        //if (i > 5) return 10;
    }
    return b;
}

int final_super_function() {
    base_url = "https://spbu.ru/universitet/uchebno-nauchnye-podrazdeleniya";   // start url to crawl
    start_url = site(base_url, "Start_group", 4);                               // start crawling by group of 4 Crawlers
    for (i = 0; i < 3; i = i + 1) {                                             // do 3 times
        url = next(start_url);                                                  // get next parsed site
        print("I have visited outer site!!!" + url);                            // print
        l = has_subdomain(url);                                                 // return subdomain if exists
        if (l) {
            domain_val = domain(l);
            base_url_new = "https://" + domain_val;                             // new start url to crawl subdomain
            start_url2 = site(base_url_new, base_url_new, 2);                   // start crawling by group of 2 Crawlers
            for (j = 0; j < 50; j = j + 1) {                                    // do 50 times
                url2 = next(start_url2);                                        // get next parsed site
                print("I have visited inner site!!!" + url2);                   // print
            }
        }
    }
    print_all_stats();                                                          // beauty print all statistics for each group separately
    return 0;
}

int main() {
    b = my_fun( 5 );                // call function and assign value
    print(b);                       // prints 1 / 3
    fib_res = fibonacci(11);        // call function fibonacci with parameter and assign value
    print(fib_res);                 // print fibonacci result
    kek_str = "kek";
    lol_str = "lol";
    print(kek_str + " " + lol_str);
    print("string print");
    final_super_function();         // parallel crawling

    // no return also supported
}
